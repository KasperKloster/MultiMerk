// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250428202851_WeeklistTaskAssignmentUpdate")]
    partial class WeeklistTaskAssignmentUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Authentication.TokenInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("TokenInfos");
                });

            modelBuilder.Entity("Domain.Entities.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("WeeklistId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.HasIndex("WeeklistId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Sku = "LC01-1001-1",
                            WeeklistId = 1
                        },
                        new
                        {
                            Id = 2,
                            Sku = "LC01-1001-2",
                            WeeklistId = 1
                        },
                        new
                        {
                            Id = 3,
                            Sku = "LC02-2002-1",
                            WeeklistId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Weeklists.Entities.Weeklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Weeklists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 101,
                            OrderNumber = "E123",
                            Supplier = "TVC"
                        },
                        new
                        {
                            Id = 2,
                            Number = 102,
                            OrderNumber = "E321",
                            Supplier = "TVC"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Weeklists.WeeklistTaskLinks.WeeklistTaskLink", b =>
                {
                    b.Property<int>("WeeklistId")
                        .HasColumnType("integer");

                    b.Property<int>("WeeklistTaskId")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<int>("WeeklistTaskStatusId")
                        .HasColumnType("integer");

                    b.HasKey("WeeklistId", "WeeklistTaskId");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("WeeklistTaskId");

                    b.HasIndex("WeeklistTaskStatusId");

                    b.ToTable("WeeklistTaskLinks");

                    b.HasData(
                        new
                        {
                            WeeklistId = 1,
                            WeeklistTaskId = 1,
                            AssignedUserId = "00000000-0000-0000-0000-000000000001",
                            WeeklistTaskStatusId = 2
                        },
                        new
                        {
                            WeeklistId = 1,
                            WeeklistTaskId = 2,
                            AssignedUserId = "00000000-0000-0000-0000-000000000004",
                            WeeklistTaskStatusId = 1
                        },
                        new
                        {
                            WeeklistId = 1,
                            WeeklistTaskId = 3,
                            AssignedUserId = "00000000-0000-0000-0000-000000000005",
                            WeeklistTaskStatusId = 1
                        },
                        new
                        {
                            WeeklistId = 1,
                            WeeklistTaskId = 4,
                            AssignedUserId = "00000000-0000-0000-0000-000000000005",
                            WeeklistTaskStatusId = 1
                        },
                        new
                        {
                            WeeklistId = 1,
                            WeeklistTaskId = 5,
                            AssignedUserId = "00000000-0000-0000-0000-000000000004",
                            WeeklistTaskStatusId = 1
                        },
                        new
                        {
                            WeeklistId = 1,
                            WeeklistTaskId = 6,
                            AssignedUserId = "00000000-0000-0000-0000-000000000001",
                            WeeklistTaskStatusId = 1
                        },
                        new
                        {
                            WeeklistId = 1,
                            WeeklistTaskId = 7,
                            AssignedUserId = "00000000-0000-0000-0000-000000000001",
                            WeeklistTaskStatusId = 1
                        },
                        new
                        {
                            WeeklistId = 1,
                            WeeklistTaskId = 8,
                            AssignedUserId = "00000000-0000-0000-0000-000000000001",
                            WeeklistTaskStatusId = 1
                        },
                        new
                        {
                            WeeklistId = 2,
                            WeeklistTaskId = 1,
                            AssignedUserId = "00000000-0000-0000-0000-000000000001",
                            WeeklistTaskStatusId = 4
                        },
                        new
                        {
                            WeeklistId = 2,
                            WeeklistTaskId = 2,
                            AssignedUserId = "00000000-0000-0000-0000-000000000004",
                            WeeklistTaskStatusId = 4
                        },
                        new
                        {
                            WeeklistId = 2,
                            WeeklistTaskId = 3,
                            AssignedUserId = "00000000-0000-0000-0000-000000000005",
                            WeeklistTaskStatusId = 4
                        },
                        new
                        {
                            WeeklistId = 2,
                            WeeklistTaskId = 4,
                            AssignedUserId = "00000000-0000-0000-0000-000000000005",
                            WeeklistTaskStatusId = 4
                        },
                        new
                        {
                            WeeklistId = 2,
                            WeeklistTaskId = 5,
                            AssignedUserId = "00000000-0000-0000-0000-000000000004",
                            WeeklistTaskStatusId = 4
                        },
                        new
                        {
                            WeeklistId = 2,
                            WeeklistTaskId = 6,
                            AssignedUserId = "00000000-0000-0000-0000-000000000001",
                            WeeklistTaskStatusId = 4
                        },
                        new
                        {
                            WeeklistId = 2,
                            WeeklistTaskId = 7,
                            AssignedUserId = "00000000-0000-0000-0000-000000000001",
                            WeeklistTaskStatusId = 3
                        },
                        new
                        {
                            WeeklistId = 2,
                            WeeklistTaskId = 8,
                            AssignedUserId = "00000000-0000-0000-0000-000000000001",
                            WeeklistTaskStatusId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Weeklists.WeeklistTasks.WeeklistTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeeklistTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Assign EAN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Create AI content list"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Assign location"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Assign correct quantity"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Upload AI content"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Create final list"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Import product list"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Create translations"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Weeklists.WeeklistTasks.WeeklistTaskAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<int>("WeeklistTaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("WeeklistTaskId");

                    b.ToTable("WeeklistTaskAssignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            WeeklistTaskId = 1
                        },
                        new
                        {
                            Id = 2,
                            WeeklistTaskId = 2
                        },
                        new
                        {
                            Id = 3,
                            WeeklistTaskId = 3
                        },
                        new
                        {
                            Id = 4,
                            WeeklistTaskId = 4
                        },
                        new
                        {
                            Id = 5,
                            WeeklistTaskId = 5
                        },
                        new
                        {
                            Id = 6,
                            WeeklistTaskId = 6
                        },
                        new
                        {
                            Id = 7,
                            WeeklistTaskId = 7
                        },
                        new
                        {
                            Id = 8,
                            WeeklistTaskId = 8
                        });
                });

            modelBuilder.Entity("Domain.Entities.Weeklists.WeeklistTasks.WeeklistTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeeklistTaskStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Awaiting"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Ready"
                        },
                        new
                        {
                            Id = 3,
                            Status = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("Domain.Entities.Weeklists.Entities.Weeklist", "Weeklist")
                        .WithMany("Products")
                        .HasForeignKey("WeeklistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Weeklist");
                });

            modelBuilder.Entity("Domain.Entities.Weeklists.WeeklistTaskLinks.WeeklistTaskLink", b =>
                {
                    b.HasOne("Domain.Entities.Authentication.ApplicationUser", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("Domain.Entities.Weeklists.Entities.Weeklist", "Weeklist")
                        .WithMany("WeeklistTaskLinks")
                        .HasForeignKey("WeeklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Weeklists.WeeklistTasks.WeeklistTask", "WeeklistTask")
                        .WithMany()
                        .HasForeignKey("WeeklistTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Weeklists.WeeklistTasks.WeeklistTaskStatus", "WeeklistTaskStatus")
                        .WithMany()
                        .HasForeignKey("WeeklistTaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Weeklist");

                    b.Navigation("WeeklistTask");

                    b.Navigation("WeeklistTaskStatus");
                });

            modelBuilder.Entity("Domain.Entities.Weeklists.WeeklistTasks.WeeklistTaskAssignment", b =>
                {
                    b.HasOne("Domain.Entities.Authentication.ApplicationUser", null)
                        .WithMany("WeeklistTaskAssignments")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Domain.Entities.Weeklists.WeeklistTasks.WeeklistTask", "WeeklistTask")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("WeeklistTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeeklistTask");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Authentication.ApplicationUser", b =>
                {
                    b.Navigation("WeeklistTaskAssignments");
                });

            modelBuilder.Entity("Domain.Entities.Weeklists.Entities.Weeklist", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("WeeklistTaskLinks");
                });

            modelBuilder.Entity("Domain.Entities.Weeklists.WeeklistTasks.WeeklistTask", b =>
                {
                    b.Navigation("AssignedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
